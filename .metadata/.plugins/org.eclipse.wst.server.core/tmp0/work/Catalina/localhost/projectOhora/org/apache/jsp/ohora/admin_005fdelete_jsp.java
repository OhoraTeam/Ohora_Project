/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-11-08 03:54:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ohora;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class admin_005fdelete_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1730276246042L));
    _jspx_dependants.put("jar:file:/C:/Users/USER/Desktop/OhoraTest/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/projectOhora/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	String contextPath = request.getContextPath();
	String userID = (String) session.getAttribute("userID");
	System.out.print("change " + userID);

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>상품 삭제 페이지</title>\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"http://localhost/jspPro/images/SiSt.ico\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<meta name=\"google\" content=\"notranslate\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Libre+Baskerville&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+KR&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".cancel-button-container {\r\n");
      out.write("    width: 500px;\r\n");
      out.write("    height: 50px;\r\n");
      out.write("    position: absolute;\r\n");
      out.write("    top: 262px;  /* 비밀번호 변경 버튼 바로 아래 */\r\n");
      out.write("    background-color: #fff;\r\n");
      out.write("    border: 1px solid #ccc;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".cancel-button {\r\n");
      out.write("    background-color: transparent;\r\n");
      out.write("    border: none;\r\n");
      out.write("    color: rgba(0, 0, 0, 1);\r\n");
      out.write("    font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("    font-size: 18px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write(".container {\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	width: 1920px;\r\n");
      out.write("	height: 670px;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".title {\r\n");
      out.write("	color: rgba(0, 0, 0, 1);\r\n");
      out.write("	width: 138.04px;\r\n");
      out.write("	height: 37px;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	left: 811.84px;\r\n");
      out.write("	top: 130px;\r\n");
      out.write("	font-family: 'Libre Baskerville', serif;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-size: 30px;\r\n");
      out.write("	white-space: nowrap;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".description {\r\n");
      out.write("	color: rgba(119, 119, 119, 1);\r\n");
      out.write("	width: 496.52px;\r\n");
      out.write("	height: 35px;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	left: 711.84px;\r\n");
      out.write("	top: 205px;\r\n");
      out.write("	font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("	line-height: 1.5;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-container {\r\n");
      out.write("	width: 500px;\r\n");
      out.write("	height: auto;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	left: 710px;\r\n");
      out.write("	top: 261px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".label-container {\r\n");
      out.write("	background-color: rgba(241, 241, 241, 1);\r\n");
      out.write("	width: 160px;\r\n");
      out.write("	height: 34px;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 10px;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	padding-left: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".label-text {\r\n");
      out.write("	color: rgba(0, 0, 0, 1);\r\n");
      out.write("	font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("	text-align: left;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("	line-height: 1.5;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-field {\r\n");
      out.write("	width: 330px;\r\n");
      out.write("	height: 34px; \r\n");
      out.write("	position: absolute;\r\n");
      out.write("	left: 170px;\r\n");
      out.write("	border: 1px solid rgba(221, 221, 221, 1);\r\n");
      out.write("	padding: 0 10px;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("	font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("	box-sizing: border-box; \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-container {\r\n");
      out.write("	width: 500px;\r\n");
      out.write("	height: 60px;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 200px;\r\n");
      out.write("	background-color: rgba(0, 0, 0, 1);\r\n");
      out.write("	border: 1px solid rgba(0, 0, 0, 1);\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-container button {\r\n");
      out.write("	background-color: transparent;\r\n");
      out.write("	border: none;\r\n");
      out.write("	color: rgba(255, 255, 255, 1);\r\n");
      out.write("	font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#changeBtn {\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#failBtn {\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<span class=\"title\">DELETE PRODUCT</span> \r\n");
      out.write("<span class=\"description\">\r\n");
      out.write("    삭제된 상품은 모든 위치에서 제거되며, 되돌릴 수 없습니다.\r\n");
      out.write("</span>\r\n");
      out.write("\r\n");
      out.write("<form  class=\"form-container\" id=\"changePwForm\" action=\"");
      out.print( contextPath );
      out.write("/login/changepasswd.do\" method=\"post\">\r\n");
      out.write("    <!-- 상품아이디 -->\r\n");
      out.write("    <div class=\"label-container\">\r\n");
      out.write("        <span class=\"label-text\">상품 아이디</span>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <!-- 상품명  -->\r\n");
      out.write("    <div class=\"label-container\" style=\"top: 55px;\">\r\n");
      out.write("        <span class=\"label-text\">상품명</span>\r\n");
      out.write("    </div>\r\n");
      out.write(" \r\n");
      out.write("    <!-- 버튼 영역 -->\r\n");
      out.write("    <div class=\"button-container\" id=\"changeBtn\">\r\n");
      out.write("        <button type=\"submit\" class=\"button-text\" onclick=\"\">상품삭제</button>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"cancel-button-container\" id=\"failBtn\">\r\n");
      out.write("    <button type=\"button\" class=\"cancel-button\" onclick=\"\">취소</button>\r\n");
      out.write("</div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<!-- 비밀번호 유효성 검사 함수 -->\r\n");
      out.write("<script>\r\n");
      out.write("	function validatePassword(password) {\r\n");
      out.write("	    // 길이 체크\r\n");
      out.write("	    if (password.length < 8 || password.length > 16) {\r\n");
      out.write("	        // alert(\"비밀번호는 8자에서 16자 사이여야 합니다.\");\r\n");
      out.write("	        return false;\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    // 정규표현식 정의\r\n");
      out.write("	    const hasUpperCase = /[A-Z]/.test(password); // 대문자\r\n");
      out.write("	    const hasLowerCase = /[a-z]/.test(password); // 소문자\r\n");
      out.write("	    const hasNumber = /[0-9]/.test(password); // 숫자\r\n");
      out.write("	    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password); // 특수문자\r\n");
      out.write("	\r\n");
      out.write("	    // 조건 검사: 4가지 중 2가지 이상 포함해야 함\r\n");
      out.write("	    const validConditions = [hasUpperCase, hasLowerCase, hasNumber, hasSpecialChar].filter(Boolean).length;\r\n");
      out.write("	\r\n");
      out.write("	    if (validConditions < 2) {\r\n");
      out.write("	        // alert(\"비밀번호는 영문 대소문자, 숫자, 특수문자 중 2가지 이상 조합이어야 합니다.\");\r\n");
      out.write("	        return false;\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    // 모든 조건을 만족하는 경우\r\n");
      out.write("	    return true;\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 확인 버튼 -->\r\n");
      out.write("<script>\r\n");
      out.write("	$(\"#changeBtn\").on(\"click\", function(event){\r\n");
      out.write("		event.preventDefault();\r\n");
      out.write("		\r\n");
      out.write("		let newPasswdVal = $(\"#newPasswd\").val();\r\n");
      out.write("		\r\n");
      out.write("		// 첫 번째 조건을 먼저 확인하고, 해당하지 않으면 함수 종료\r\n");
      out.write("		if (!validatePassword(newPasswdVal)) {\r\n");
      out.write("			alert(\"비밀번호 입력 조건을 다시 한번 확인해주세요.\");\r\n");
      out.write("			return; // 조건이 맞지 않으면 이후 코드 실행하지 않음\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 두 번째 조건 확인\r\n");
      out.write("		if ($(\"#confirmNewPasswd\").val() !== newPasswdVal) {\r\n");
      out.write("			alert(\"새 비밀번호 확인이 정확하지 않습니다. 다시 입력해주세요.\");\r\n");
      out.write("			return; // 조건이 맞지 않으면 함수 종료\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 모든 조건을 만족하는 경우 폼 제출\r\n");
      out.write("		$(\"#changePwForm\").submit();\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 취소 버튼 -->\r\n");
      out.write("<script>\r\n");
      out.write("	$(\"#failBtn\").on(\"click\", function(){\r\n");
      out.write("		location.href = \"");
      out.print( contextPath );
      out.write("/ohora/oho_main.jsp\";\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
